// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/satryarangga/amartha-loan-engine/models"

	repositories "github.com/satryarangga/amartha-loan-engine/repositories"
)

// CommonRepository is an autogenerated mock type for the CommonRepository type
type CommonRepository[T interface{}] struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx, param
func (_m *CommonRepository[T]) FindAll(ctx context.Context, param models.FindAllParam) ([]T, error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FindAllParam) ([]T, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.FindAllParam) []T); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.FindAllParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id, relations
func (_m *CommonRepository[T]) FindByID(ctx context.Context, id string, relations []string) (*T, error) {
	ret := _m.Called(ctx, id, relations)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (*T, error)); ok {
		return rf(ctx, id, relations)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) *T); ok {
		r0 = rf(ctx, id, relations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, id, relations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, tx, model
func (_m *CommonRepository[T]) Insert(ctx context.Context, tx *gorm.DB, model *T) (string, error) {
	ret := _m.Called(ctx, tx, model)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *T) (string, error)); ok {
		return rf(ctx, tx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *T) string); ok {
		r0 = rf(ctx, tx, model)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *T) error); ok {
		r1 = rf(ctx, tx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, model
func (_m *CommonRepository[T]) Update(ctx context.Context, tx *gorm.DB, model *T) error {
	ret := _m.Called(ctx, tx, model)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *T) error); ok {
		r0 = rf(ctx, tx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTransaction provides a mock function with given fields: ctx, fn
func (_m *CommonRepository[T]) WithTransaction(ctx context.Context, fn repositories.TransactionFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.TransactionFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCommonRepository creates a new instance of CommonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommonRepository[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *CommonRepository[T] {
	mock := &CommonRepository[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
